# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '../exp_params.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtWidgets
from PyQt5.QtWidgets import QDialog
from ui.config_sequence import Ui_sequenceConfig

from IHM import IHM
from automatic_sequences import TitrationSequence

from windowHandler import WindowHandler
from titration_window import TitrationWindow


class ExpConfig(QDialog,Ui_sequenceConfig): #(object)
    
    def __init__(self, ihm:IHM, win:WindowHandler, parent=None):
        super(ExpConfig,self).__init__(parent)
        self.setupUi(self)
        self.ihm=ihm
        self.window_handler=win
        print(ihm.saving_folder)
        #graphique
        self.saving_folder.setText(self.ihm.saving_folder)
        self.browse.clicked.connect(self.browsefolder)
        self.dialogbox.accepted.connect(self.launchTitration)

    def browsefolder(self):
        folderpath = QtWidgets.QFileDialog.getExistingDirectory(self, 'Select Folder', "H:/A Nouvelle arbo/DOCUMENTS TECHNIQUES/Projets Collaboratifs/DOMMINO/MESURES")
        self.saving_folder.setText(folderpath) #affichage du chemin de dossier
        self.ihm.saving_folder=self.saving_folder.text()
        self.ihm.updateConfigFile()
    
    def launchTitration(self):
        
        config = [self.exp_name.toPlainText(),\
            self.description.toPlainText(),\
            self.OM_type.currentText(),\
            self.concentration.value(),\
            self.fibers.currentText(),\
            self.flowcell.currentText(),\
            1000*self.V0.value(),\
            self.dispense_mode.currentText(),\
            self.Nmes.value(),\
            self.pH_init.value(),\
            self.pH_fin.value(),\
            self.fixed_delay_box.value(),\
            self.agitation_delay_box.value(),\
            self.saving_folder.text()]
        
        self.ihm.titration_sequence=TitrationSequence(self.ihm,self.window_handler,config) #création de l'objet dans l'IHM
        self.ihm.titration_sequence.configure()
        
        #affichage des données pour la séquence auto
        print("\nNom de l'expérience : ",self.ihm.titration_sequence.experience_name,\
        "\nDescription : ",self.ihm.titration_sequence.description,\
        "\nType de matière organique : ",self.ihm.titration_sequence.OM_type,\
        "\nConcentration : ",self.ihm.titration_sequence.concentration,\
        "\nFibres : ",self.ihm.titration_sequence.fibers,\
        "\nFlowcell : ",self.ihm.titration_sequence.flowcell,\
        "\nVolume initial : ", self.ihm.titration_sequence.V_init,\
        "\nMode de dispense : ",self.ihm.titration_sequence.dispense_mode,\
        "\npH initial : ",self.ihm.titration_sequence.pH_start,\
        "\npH final : ",self.ihm.titration_sequence.pH_end,\
        "\nNombre de mesures : ",self.ihm.titration_sequence.N_mes,\
        "\nFidex delay between measures (seconds): ", self.ihm.titration_sequence.fixed_delay_sec,\
        "\nMixing delay for pump pausing (seconds): ", self.ihm.titration_sequence.mixing_delay_sec,\
        "\nDossier de sauvegarde du titrage : ",self.ihm.titration_sequence.saving_folder)

#Lancement direct du programme avec run
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ihm=IHM()
    win=WindowHandler()
    ui = ExpConfig(ihm,win)
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
